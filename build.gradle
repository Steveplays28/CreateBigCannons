plugins {
    id 'fabric-loom' version '1.1.4'
//    id 'maven-publish'

    id 'eclipse'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group


repositories {
    maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
    maven { url = "https://dvs1.progwml6.com/files/maven/" } // JEI
    maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
    maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
    maven { url = "https://api.modrinth.com/maven" } // LazyDFU
    maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
    maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
    maven { url = "https://cursemaven.com" } // Forge Config API Port
    maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
    maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
    maven { url = "https://maven.tterrag.com/" } // Flywheel
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Create - dependencies are added transitively
    modImplementation("com.simibubi.create:create-fabric-${project.minecraft_version}:${project.create_version}")

    // Flywheel
    modImplementation "com.jozufozu.flywheel:flywheel-fabric-${project.minecraft_version}:${project.flywheel_version}"

    // Registrate Refabricated
    modImplementation(include("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}"))

    // Mixin Extras
    implementation(include("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))
    annotationProcessor(include("com.github.LlamaLad7:MixinExtras:${project.mixin_extras_version}"))

    // Porting Lib
    modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.porting_lib_version}"))

    // Development QOL
    modLocalRuntime("maven.modrinth:lazydfu:${project.lazydfu_version}")
    modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

    // Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
    // See root gradle.properties to choose which to use at runtime.
    switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
        case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
        case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
        case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
        case "disabled": break
        default: println("Unknown recipe viewer specified: ${recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
    }
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

def getGitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def getGitBranch = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--abbrev-ref', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

if (project.release == "true") {
    version = "${project.minecraft_version}-${project.mod_version}"
} else {
    version = "${project.minecraft_version}-nightly-${getGitHash}"
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId = group
//            artifactId = archivesBaseName
//            version = version
//            artifact jar
//        }
//    }
//    repositories {
//        maven {
//            url "file://${project.projectDir}/mcmodsrepo"
//        }
//        maven {
//            name = "GitHubPackages"
//            url = "https://maven.pkg.github.com/rbasamoyai/createbigcannons"
//            credentials {
//                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
//                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
//            }
//        }
//    }
//}
